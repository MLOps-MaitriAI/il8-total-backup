name: CI/CD Pipeline
on:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/mlops-maitriai/il8-total-backup-backend
  IMAGE_NAME_FRONTEND: ghcr.io/mlops-maitriai/il8-total-backup-frontend

jobs:
  build-and-test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.IL8_CI_CD }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        
      - name: Build and Push Backend Image
        working-directory: ./backend/app/
        run: |
          docker build -t ${{ env.IMAGE_NAME_BACKEND }}:latest .
          docker push ${{ env.IMAGE_NAME_BACKEND }}:latest
          
      - name: Build and Push Frontend Image
        working-directory: ./frontend
        run: |
          docker build -t ${{ env.IMAGE_NAME_FRONTEND }}:latest .
          docker push ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    steps:
      - name: Create SSH key file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PEM_FILE }}" > ~/.ssh/deploy_key.pem
          chmod 600 ~/.ssh/deploy_key.pem

      - name: Setup Docker Network and Containers
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "
            # Login to GitHub Container Registry
            echo '${{ secrets.IL8_CI_CD }}' | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Create network if it doesn't exist
            sudo docker network create my-network 2>/dev/null || true

            # Stop and remove existing containers
            sudo docker rm -f frontend backend db nginx certbot 2>/dev/null || true

            # Start MariaDB container
            sudo docker run -d \
              --name db \
              --network my-network \
              -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
              -e MYSQL_DATABASE=lms_db \
              -e MYSQL_ROOT_HOST='%' \
              -p 3306:3306 \
              -v db_data:/var/lib/mysql \
              -v ./my.cnf:/etc/mysql/my.cnf \
              --health-cmd='mysqladmin ping -h localhost -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }}' \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=5 \
              --restart unless-stopped \
              mariadb:10.5 \
              --default-authentication-plugin=mysql_native_password

            # Wait for MariaDB to be healthy
            echo 'Waiting for MariaDB to be healthy...'
            timeout 300 bash -c 'while ! sudo docker exec db mysqladmin ping -h localhost -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} --silent; do sleep 5; done'

            # Start Backend container
            sudo docker run -d \
              --name backend \
              --network my-network \
              -e DATABASE_URL=mysql+pymysql://root:${{ secrets.MYSQL_ROOT_PASSWORD }}@db:3306/lms_db \
              -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
              -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              -e ALGORITHM=HS256 \
              -v ./backend/app/static/uploads:/app/static/uploads \
              ${{ env.IMAGE_NAME_BACKEND }}:latest \
              sh -c 'python wait_for_db.py && uvicorn main:app --host 0.0.0.0 --port 8000'

            # Start Frontend container
            sudo docker run -d \
              --name frontend \
              --network my-network \
              ${{ env.IMAGE_NAME_FRONTEND }}:latest

            # Start Nginx container
            sudo docker run -d \
              --name nginx \
              --network my-network \
              -p 80:80 \
              -p 443:443 \
              -v ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
              -v /etc/letsencrypt:/etc/letsencrypt:ro \
              nginx:latest

            # Start Certbot container
            sudo docker run -d \
              --name certbot \
              -v /etc/letsencrypt:/etc/letsencrypt \
              certbot/certbot
          "

      - name: Verify Deployment
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "Verifying container status..."
          ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "
            echo 'Container Status:'
            sudo docker ps -a
            
            echo '\nContainer Logs:'
            echo '\nMariaDB Logs:'
            sudo docker logs db
            echo '\nBackend Logs:'
            sudo docker logs backend
            echo '\nFrontend Logs:'
            sudo docker logs frontend
            echo '\nNginx Logs:'
            sudo docker logs nginx
          "

      - name: Cleanup SSH key
        run: rm -f ~/.ssh/deploy_key.pem
