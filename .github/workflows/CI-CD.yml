name: CI/CD Pipeline
on:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/mlops-maitriai/il8-total-backup-backend
  IMAGE_NAME_FRONTEND: ghcr.io/mlops-maitriai/il8-total-backup-frontend
  MYSQL_IMAGE: mysql:5.7

jobs:
  build-and-test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.IL8_CI_CD }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        
      - name: Build and Push Backend Image
        working-directory: ./backend/app/
        run: |
          docker build -t ${{ env.IMAGE_NAME_BACKEND }}:latest .
          docker push ${{ env.IMAGE_NAME_BACKEND }}:latest
          
      - name: Build and Push Frontend Image
        working-directory: ./frontend
        run: |
          docker build -t ${{ env.IMAGE_NAME_FRONTEND }}:latest .
          docker push ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    steps:
      - name: Create SSH key file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PEM_FILE }}" > ~/.ssh/deploy_key.pem
          chmod 600 ~/.ssh/deploy_key.pem

      - name: Install Docker and Docker Compose on Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo 'Installing Docker Compose...'
              sudo apt-get install -y docker-compose
            fi
          "
          
      - name: Login to GitHub Container Registry on Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "
            # Create docker config directory if it doesn't exist
            mkdir -p ~/.docker
            
            # Login to GitHub Container Registry
            echo '${{ secrets.IL8_CI_CD }}' | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          "

      - name: Pull and Run Containers
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "
            # Pull the latest images
            sudo docker pull ${{ env.IMAGE_NAME_FRONTEND }}:latest
            sudo docker pull ${{ env.IMAGE_NAME_BACKEND }}:latest
            
            # Stop and remove existing containers
            sudo docker stop frontend backend || true
            sudo docker rm frontend backend || true
            
            # Run the containers
            sudo docker run -d --name frontend -p 80:80 ${{ env.IMAGE_NAME_FRONTEND }}:latest
            sudo docker run -d --name backend -p 8000:8000 ${{ env.IMAGE_NAME_BACKEND }}:latest
          "

      - name: Verify Deployment
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "Verifying container status..."
          ssh -i ~/.ssh/deploy_key.pem -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "
            sudo docker ps --format '{{.Names}}\t{{.Status}}'
          "

      - name: Cleanup SSH key
        run: rm -f ~/.ssh/deploy_key.pem
