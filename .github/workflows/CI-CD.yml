name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/MLOps-MaitriAI/il8-total-backup-backend
  IMAGE_NAME_FRONTEND: ghcr.io/MLOps-MaitriAI/il8-total-backup-frontend
  MYSQL_IMAGE: mysql:5.7  # Assuming MySQL container image is not custom

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js for TypeScript frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Install dependencies and run tests for frontend
      - name: Install and Test Frontend
        working-directory: ./frontend
        run: |
          # Set engine-strict to false to bypass engine version checks
          npm config set engine-strict false
          
          # Install dependencies using legacy peer deps to resolve conflicts
          npm install --legacy-peer-deps

          # Run tests
          npm run test

      # Set up Python for FastAPI backend
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      # Install dependencies and run tests for backend
      - name: Install and Test Backend
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pytest

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.IL8_CI_CD }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      # Build and push backend image
      - name: Build and Push Backend Image
        working-directory: ./backend
        run: |
          docker build -t ${{ env.IMAGE_NAME_BACKEND }}:latest .
          docker push ${{ env.IMAGE_NAME_BACKEND }}:latest

      # Build and push frontend image
      - name: Build and Push Frontend Image
        working-directory: ./frontend
        run: |
          docker build -t ${{ env.IMAGE_NAME_FRONTEND }}:latest .
          docker push ${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest

    steps:
      # Deploy containers on the server
      - name: Deploy to Akamai server
        env:
          SERVER_IP: ${{ secrets.AKAMAI_SERVER_IP }}
          SERVER_USER: ${{ secrets.AKAMAI_SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.AKAMAI_SERVER_PASSWORD }}
          WEBSITE_FOLDER: ${{ secrets.WEBSITE_FOLDER }}
        run: |
          mkdir -p temp_staging

          # Copy only the changed files to the temporary directory
          git diff --name-only HEAD~1 HEAD | while read -r file; do
            if [ -f "$file" ]; then
              echo "Processing: $file"
              mkdir -p "temp_staging/$(dirname "$file")"
              cp "$file" "temp_staging/$file"
            fi
          done

          sshpass -p "$SERVER_PASSWORD" rsync -avz --exclude='.git' --exclude='.github' -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" temp_staging/ "$SERVER_USER@$SERVER_IP:$WEBSITE_FOLDER"

          rm -rf temp_staging

          echo "Deployment completed successfully!"

      - name: Verify Deployment
        env:
          SERVER_IP: ${{ secrets.AKAMAI_SERVER_IP }}
          SERVER_USER: ${{ secrets.AKAMAI_SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.AKAMAI_SERVER_PASSWORD }}
          WEBSITE_FOLDER: ${{ secrets.WEBSITE_FOLDER }}
        run: |
          echo "Recently changed files:"
          git diff --name-only HEAD~1 HEAD
          
          echo "Verifying files on server:"
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$SERVER_USER@$SERVER_IP" "ls -la $WEBSITE_FOLDER"

      - name: Deployment Status
        run: echo "Deployment completed. Please check the Verify Deployment step output to confirm the updated files."
